terraform apply -auto-approve

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create
[0m
Terraform will perform the following actions:

[1m  # helm_release.ingress_nginx[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "helm_release" "ingress_nginx" {
      [32m+[0m [0m[1m[0matomic[0m[0m                     = false
      [32m+[0m [0m[1m[0mchart[0m[0m                      = "ingress-nginx"
      [32m+[0m [0m[1m[0mcleanup_on_fail[0m[0m            = false
      [32m+[0m [0m[1m[0mcreate_namespace[0m[0m           = true
      [32m+[0m [0m[1m[0mdependency_update[0m[0m          = false
      [32m+[0m [0m[1m[0mdisable_crd_hooks[0m[0m          = false
      [32m+[0m [0m[1m[0mdisable_openapi_validation[0m[0m = false
      [32m+[0m [0m[1m[0mdisable_webhooks[0m[0m           = false
      [32m+[0m [0m[1m[0mforce_update[0m[0m               = false
      [32m+[0m [0m[1m[0mid[0m[0m                         = (known after apply)
      [32m+[0m [0m[1m[0mlint[0m[0m                       = false
      [32m+[0m [0m[1m[0mmanifest[0m[0m                   = (known after apply)
      [32m+[0m [0m[1m[0mmax_history[0m[0m                = 0
      [32m+[0m [0m[1m[0mmetadata[0m[0m                   = (known after apply)
      [32m+[0m [0m[1m[0mname[0m[0m                       = "ingress-nginx"
      [32m+[0m [0m[1m[0mnamespace[0m[0m                  = "ingress-nginx"
      [32m+[0m [0m[1m[0mpass_credentials[0m[0m           = false
      [32m+[0m [0m[1m[0mrecreate_pods[0m[0m              = false
      [32m+[0m [0m[1m[0mrender_subchart_notes[0m[0m      = true
      [32m+[0m [0m[1m[0mreplace[0m[0m                    = false
      [32m+[0m [0m[1m[0mrepository[0m[0m                 = "https://kubernetes.github.io/ingress-nginx"
      [32m+[0m [0m[1m[0mreset_values[0m[0m               = false
      [32m+[0m [0m[1m[0mreuse_values[0m[0m               = false
      [32m+[0m [0m[1m[0mskip_crds[0m[0m                  = false
      [32m+[0m [0m[1m[0mstatus[0m[0m                     = "deployed"
      [32m+[0m [0m[1m[0mtimeout[0m[0m                    = 300
      [32m+[0m [0m[1m[0mvalues[0m[0m                     = [
          [32m+[0m [0m<<-EOT
                # nginx_ingress_values.yaml
                
                controller:
                  updateStrategy:
                    type: "RollingUpdate"
                    rollingUpdate:
                      maxUnavailable: 1
                  hostPort:
                    enabled: true
                  terminationGracePeriodSeconds: 0
                  service:
                    type: "NodePort"
                  watchIngressWithoutClass: true
                  nodeSelector:
                    ingress-ready: "true"
                  tolerations:
                    - key: "node-role.kubernetes.io/master"
                      operator: "Equal"
                      effect: "NoSchedule"
                  publishService:
                    enabled: false
                  extraArgs:
                    publish-status-address: "localhost"
            EOT,
        ]
      [32m+[0m [0m[1m[0mverify[0m[0m                     = false
      [32m+[0m [0m[1m[0mversion[0m[0m                    = "4.0.6"
      [32m+[0m [0m[1m[0mwait[0m[0m                       = true
      [32m+[0m [0m[1m[0mwait_for_jobs[0m[0m              = false
    }

[1m  # kind_cluster.default[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "kind_cluster" "default" {
      [32m+[0m [0m[1m[0mclient_certificate[0m[0m     = (known after apply)
      [32m+[0m [0m[1m[0mclient_key[0m[0m             = (known after apply)
      [32m+[0m [0m[1m[0mcluster_ca_certificate[0m[0m = (known after apply)
      [32m+[0m [0m[1m[0mendpoint[0m[0m               = (known after apply)
      [32m+[0m [0m[1m[0mid[0m[0m                     = (known after apply)
      [32m+[0m [0m[1m[0mkubeconfig[0m[0m             = (known after apply)
      [32m+[0m [0m[1m[0mkubeconfig_path[0m[0m        = "/home/mwoodpatrick/.kube/config"
      [32m+[0m [0m[1m[0mname[0m[0m                   = "demo-local"
      [32m+[0m [0m[1m[0mnode_image[0m[0m             = (known after apply)
      [32m+[0m [0m[1m[0mwait_for_ready[0m[0m         = true

      [32m+[0m [0mkind_config {
          [32m+[0m [0m[1m[0mapi_version[0m[0m = "kind.x-k8s.io/v1alpha4"
          [32m+[0m [0m[1m[0mkind[0m[0m        = "Cluster"

          [32m+[0m [0mnode {
              [32m+[0m [0m[1m[0mkubeadm_config_patches[0m[0m = [
                  [32m+[0m [0m<<-EOT
                        kind: InitConfiguration
                        nodeRegistration:
                          kubeletExtraArgs:
                            node-labels: "ingress-ready=true"
                    EOT,
                ]
              [32m+[0m [0m[1m[0mrole[0m[0m                   = "control-plane"

              [32m+[0m [0mextra_port_mappings {
                  [32m+[0m [0m[1m[0mcontainer_port[0m[0m = 80
                  [32m+[0m [0m[1m[0mhost_port[0m[0m      = 80
                }
              [32m+[0m [0mextra_port_mappings {
                  [32m+[0m [0m[1m[0mcontainer_port[0m[0m = 443
                  [32m+[0m [0m[1m[0mhost_port[0m[0m      = 443
                }
            }
          [32m+[0m [0mnode {
              [32m+[0m [0m[1m[0mrole[0m[0m = "worker"
            }
        }
    }

[1m  # null_resource.wait_for_ingress_nginx[0m will be created[0m[0m
[0m  [32m+[0m[0m resource "null_resource" "wait_for_ingress_nginx" {
      [32m+[0m [0m[1m[0mid[0m[0m       = (known after apply)
      [32m+[0m [0m[1m[0mtriggers[0m[0m = {
          [32m+[0m [0m"key" = (known after apply)
        }
    }

[0m[1mPlan:[0m 3 to add, 0 to change, 0 to destroy.
[0m[0m[1mkind_cluster.default: Creating...[0m[0m
[0m[1mkind_cluster.default: Still creating... [10s elapsed][0m[0m
[0m[1mkind_cluster.default: Still creating... [20s elapsed][0m[0m
[0m[1mkind_cluster.default: Still creating... [30s elapsed][0m[0m
[0m[1mkind_cluster.default: Still creating... [40s elapsed][0m[0m
[0m[1mkind_cluster.default: Still creating... [50s elapsed][0m[0m
[0m[1mkind_cluster.default: Still creating... [1m0s elapsed][0m[0m
[0m[1mkind_cluster.default: Still creating... [1m10s elapsed][0m[0m
[0m[1mkind_cluster.default: Still creating... [1m20s elapsed][0m[0m
[0m[1mkind_cluster.default: Still creating... [1m30s elapsed][0m[0m
[0m[1mkind_cluster.default: Still creating... [1m40s elapsed][0m[0m
[0m[1mkind_cluster.default: Still creating... [1m50s elapsed][0m[0m
[0m[1mkind_cluster.default: Still creating... [2m0s elapsed][0m[0m
[0m[1mkind_cluster.default: Still creating... [2m10s elapsed][0m[0m
[0m[1mkind_cluster.default: Still creating... [2m20s elapsed][0m[0m
[0m[1mkind_cluster.default: Still creating... [2m30s elapsed][0m[0m
[0m[1mkind_cluster.default: Creation complete after 2m37s [id=demo-local-][0m
[0m[1mhelm_release.ingress_nginx: Creating...[0m[0m
[0m[1mhelm_release.ingress_nginx: Still creating... [10s elapsed][0m[0m
[0m[1mhelm_release.ingress_nginx: Creation complete after 20s [id=ingress-nginx][0m
[0m[1mnull_resource.wait_for_ingress_nginx: Creating...[0m[0m
[0m[1mnull_resource.wait_for_ingress_nginx: Provisioning with 'local-exec'...[0m[0m
[0m[1mnull_resource.wait_for_ingress_nginx (local-exec):[0m [0mExecuting: ["/bin/sh" "-c" "      printf \"\\nWaiting for the nginx ingress controller...\\n\"\n      kubectl wait --namespace ingress-nginx \\\n        --for=condition=ready pod \\\n        --selector=app.kubernetes.io/component=controller \\\n        --timeout=90s\n"]

[0m[1mnull_resource.wait_for_ingress_nginx (local-exec):[0m [0mWaiting for the nginx ingress controller...
[0m[1mnull_resource.wait_for_ingress_nginx (local-exec):[0m [0m/bin/sh: line 2: kubectl: command not found
[31mâ•·[0m[0m
[31mâ”‚[0m [0m[1m[31mError: [0m[0m[1mlocal-exec provisioner error[0m
[31mâ”‚[0m [0m
[31mâ”‚[0m [0m[0m  with null_resource.wait_for_ingress_nginx,
[31mâ”‚[0m [0m  on nginx_ingress.tf line 28, in resource "null_resource" "wait_for_ingress_nginx":
[31mâ”‚[0m [0m  28:   provisioner "local-exec" [4m{[0m[0m
[31mâ”‚[0m [0m
[31mâ”‚[0m [0mError running command '      printf "\nWaiting for the nginx ingress
[31mâ”‚[0m [0mcontroller...\n"
[31mâ”‚[0m [0m      kubectl wait --namespace ingress-nginx \
[31mâ”‚[0m [0m        --for=condition=ready pod \
[31mâ”‚[0m [0m        --selector=app.kubernetes.io/component=controller \
[31mâ”‚[0m [0m        --timeout=90s
[31mâ”‚[0m [0m': exit status 127. Output: 
[31mâ”‚[0m [0mWaiting for the nginx ingress controller...
[31mâ”‚[0m [0m/bin/sh: line 2: kubectl: command not found
[31mâ”‚[0m [0m
[31mâ•µ[0m[0m
make: *** [Makefile:8: apply] Error 1
